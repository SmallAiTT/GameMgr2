var CtrlVo = require("./vo/CtrlVo");
var domain = require("domain");
var ttUtils = {};
ttUtils.transReq = function(req, doClass, isInit){
    var obj = new doClass();
    var body = req.body;
    for (var key in obj) {
        obj[key] = body[key] || (isInit ? obj[key] : null);
    }
    return obj
};

ttUtils.createPoByCtrl = function(req, res, client, PoClass){
    var po = ttUtils.transReq(req, PoClass);
    client.create(PoClass, po, function(err, result){
        err ? ttUtils.doErr(res, err) : ttUtils.doInfo(res);
    });
}

ttUtils.doInfo = function(res, msg, value){
    res.json(new CtrlVo(CtrlVo.INFO, msg || "Success!", value));
};

ttUtils.doWarn = function(res, msg, value){
    res.json(new CtrlVo(CtrlVo.WARN, msg || "Warning!", value));
};

ttUtils.doErr = function(res, msg, value){
    res.json(new CtrlVo(CtrlVo.ERR, msg, value));
};

ttUtils.doQuest = function(res, msg, value){
    res.json(new CtrlVo(CtrlVo.QUEST, msg, value));
};

ttUtils.tryIt = function(func, addArr, errCb){
    if(arguments.length == 0) return console.error("Arguments error for tryIt!");
    var d = domain.create();
    d.on("error", errCb || function(err){
        console.error(err);
    });
    if(addArr){
        for(var i = 0, li = addArr.length; i < li; ++i){
            d.add(addArr[i]);
        }
    }
    d.run(func);
}

module.exports = ttUtils;