var dbUtils = require("./dbUtils");

function BaseDao(){
    this.create = function(client, poClass, args, cb){
        var tableName = typeof poClass == "string" ? poClass : poClass.tableName;
        var sqlStr = "insert into " + tableName + " set ? ";
        client.query(sqlStr, args, function(err, result){
            err ? cb(err, null) : cb(null, result);
        });
    };
    this.update = function(client, poClass, values, cnd, args, cb){
        var tableName = typeof poClass == "string" ? poClass : poClass.tableName;
        var cnd = dbUtils.getCnd.apply(this, Array.prototype.slice.call(arguments, 3));
        var cols = "";
        var tempArr = [];
        for (var key in values) {
            cols += key + " = ?,"
            tempArr.push(values[key]);
        }
        cols = cols.substring(0, cols.length - 1);//去除最有一个逗号
        var sqlStr = "update " + tableName + " set " + cols + cnd.where;
        client.query(sqlStr, tempArr.concat(cnd.args), function (err, result) {
            err ? cnd.cb(err, null) : cnd.cb(null, result);
        });
    };
    this.read = function(client, poClass, cnd, args, cb){
        var tableName = typeof poClass == "string" ? poClass : poClass.tableName;
        var cnd = dbUtils.getCnd.apply(this, Array.prototype.slice.call(arguments, 2));
        var strSql = "select * from " + tableName + cnd.where;
        client.query(strSql, cnd.args, function (err, result) {
            err ? cnd.cb(err, null) : cnd.cb(null, result.length > 0 ? result[0] : null);
        });
    };
    this.del = function(client, poClass, cnd, args, cb){
        var tableName = typeof poClass == "string" ? poClass : poClass.tableName;
        var cnd = dbUtils.getCnd.apply(this, Array.prototype.slice.call(arguments, 2));
        var sql = "delete from " + tableName + cnd.where;
        client.query(sql, cnd.args || [], function (err, result) {
            err ? cnd.cb(err, null) : cnd.cb(null, result);
        });
    };
    this.list = function(client, poClass, cnd, args, cb){
        var tableName = typeof poClass == "string" ? poClass : poClass.tableName;
        var cnd = dbUtils.getCnd.apply(this, Array.prototype.slice.call(arguments, 2));
        var strSql = "select * from	" + tableName + cnd.where;
        client.query(strSql, cnd.args, function (err, result) {
            err ? cnd.cb(err, null) : cnd.cb(null, result);
        });
    };
    this.listPage = function(client, poClass, cnd, args, cb){};
}

module.exports = BaseDao;