
var CND_BASE_STR = " where 1 = 1 ";
function getCnd(cnd, args, cb){
    if(arguments.length > 3) return null;
    if(arguments.length == 1){
        return {where : CND_BASE_STR + "", args : [], cb : arguments[0]}
    }else if(arguments.length == 2){
        var info = {args : [], cb : args};
        args = cnd;
        cnd = CND_BASE_STR + "";
        if(args){
            for (var key in args) {
                if(!key || key == "_orderBy") continue;
                cnd += " and " + key + " = ? ";
                info.args.push(args[key]);
            }
            var orderByArr = args._orderBy;
            if(orderByArr && orderByArr.length > 0){
                cnd += " order by "
                for (var i = 0, li = orderByArr.length; i < li; i++) {
                    cnd += " " + orderByArr[i] + " ";
                    if(i < li -1) cnd += ","
                }
            }
        }
        info.where = cnd;
        return info;
    }
    cnd = cnd || "";
    if(cnd.trim() != "" && cnd.search(/^[\s]*where[\s]/) != 0){
        cnd = " where " + cnd
    }
    return {where : cnd, args : args, cb : cb};
}
function BaseDao(client){
    this.client = client;

    this.query = function(){
        client.query.apply(client, arguments);
    };

    this.create = function(poClass, args, cb){
        var tableName = typeof poClass == "string" ? poClass : poClass.tableName;
        var sqlStr = "insert into " + tableName + " set ? ";
        this.client.query(sqlStr, args, function(err, result){
            err ? cb(err, null) : cb(null, result);
        });
    };
    this.update = function(poClass, values, cnd, args, cb){
        var tableName = typeof poClass == "string" ? poClass : poClass.tableName;
        var cnd = getCnd.apply(this, Array.prototype.slice.call(arguments, 2));
        var cols = "";
        var tempArr = [];
        for (var key in values) {
            cols += key + " = ?,"
            tempArr.push(values[key]);
        }
        cols = cols.substring(0, cols.length - 1);//去除最有一个逗号
        var sqlStr = "update " + tableName + " set " + cols + cnd.where;
        this.client.query(sqlStr, tempArr.concat(cnd.args), function (err, result) {
            err ? cnd.cb(err, null) : cnd.cb(null, result);
        });
    };
    this.read = function(poClass, cnd, args, cb){
        var tableName = typeof poClass == "string" ? poClass : poClass.tableName;
        var cnd = getCnd.apply(this, Array.prototype.slice.call(arguments, 1));
        var strSql = "select * from " + tableName + cnd.where;
        this.client.query(strSql, cnd.args, function (err, result) {
            err ? cnd.cb(err, null) : cnd.cb(null, result.length > 0 ? result[0] : null);
        });
    };
    this.del = function(poClass, cnd, args, cb){
        var tableName = typeof poClass == "string" ? poClass : poClass.tableName;
        var cnd = getCnd.apply(this, Array.prototype.slice.call(arguments, 1));
        var sql = "delete from " + tableName + cnd.where;
        this.client.query(sql, cnd.args || [], function (err, result) {
            err ? cnd.cb(err, null) : cnd.cb(null, result);
        });
    };
    this.list = function(poClass, cnd, args, cb){
        var tableName = typeof poClass == "string" ? poClass : poClass.tableName;
        var cnd = getCnd.apply(this, Array.prototype.slice.call(arguments, 1));
        var strSql = "select * from	" + tableName + cnd.where;
        this.client.query(strSql, cnd.args, function (err, result) {
            err ? cnd.cb(err, null) : cnd.cb(null, result);
        });
    };
}

module.exports = BaseDao;