var CND_BASE_STR = " where 1 = 1 ";
/**
 * Desc: 条件获取的方法。
 * @author zheng.xiaojun
 *
 * @param cnd
 * @param args
 * @param cb
 * @returns {*}
 */
function getCnd(cnd, args, cb){
    if(arguments.length > 3) return null;
    if(arguments.length == 1){
        return {where : CND_BASE_STR + "", args : [], cb : arguments[0]}
    }else if(arguments.length == 2){
        var info = {args : [], cb : args};
        args = cnd;
        cnd = CND_BASE_STR + "";
        if(args){
            for (var key in args) {
                if(!key || key == "_orderBy") continue;
                cnd += " and " + key + " = ? ";
                info.args.push(args[key]);
            }
            var orderByArr = args._orderBy;
            if(orderByArr && orderByArr.length > 0){
                cnd += " order by "
                for (var i = 0, li = orderByArr.length; i < li; i++) {
                    cnd += " " + orderByArr[i] + " ";
                    if(i < li -1) cnd += ","
                }
            }
        }
        info.where = cnd;
        return info;
    }
    cnd = cnd || "";
    if(cnd.trim() != "" && cnd.search(/^[\s]*where[\s]/) != 0){
        cnd = " where " + cnd
    }
    return {where : cnd, args : args, cb : cb};
};
/**
 * Desc: 插入操作。
 * @author zheng.xiaojun
 *
 * @param poClass
 * @param args
 * @param cb
 */
function insert(poClass, args, cb){
    var tableName = typeof poClass == "string" ? poClass : poClass.tableName;
    var sqlStr = "insert into " + tableName + " set ? ";
    this.query(sqlStr, args, cb);
};
/**
 * Desc: 更新操作。
 * @author zheng.xiaojun
 *
 * @param poClass
 * @param values
 * @param cnd
 * @param args
 * @param cb
 */
function update(poClass, values, cnd, args, cb){
    var tableName = typeof poClass == "string" ? poClass : poClass.tableName;
    var cnd = getCnd.apply(this, Array.prototype.slice.call(arguments, 2));
    var cols = "";
    var tempArr = [];
    for (var key in values) {
        cols += key + " = ?,"
        tempArr.push(values[key]);
    }
    cols = cols.substring(0, cols.length - 1);//去除最有一个逗号
    var sqlStr = "update " + tableName + " set " + cols + cnd.where;
    this.query(sqlStr, tempArr.concat(cnd.args), cnd.cb);
};
/**
 * Desc: 获取单条数据操作。
 * @author zheng.xiaojun
 *
 * @param poClass
 * @param cnd
 * @param args
 * @param cb
 */
function select(poClass, cnd, args, cb){
    var tableName = typeof poClass == "string" ? poClass : poClass.tableName;
    var cnd = getCnd.apply(this, Array.prototype.slice.call(arguments, 1));
    var strSql = "select * from " + tableName + cnd.where;
    this.query(strSql, cnd.args, function (err, result) {
        err ? cnd.cb(err, null) : cnd.cb(null, result.length > 0 ? result[0] : null);
    });
};
/**
 * Desc: 删除操作。
 * @author zheng.xiaojun
 *
 * @param poClass
 * @param cnd
 * @param args
 * @param cb
 */
function del(poClass, cnd, args, cb){
    var tableName = typeof poClass == "string" ? poClass : poClass.tableName;
    var cnd = getCnd.apply(this, Array.prototype.slice.call(arguments, 1));
    var sql = "delete from " + tableName + cnd.where;
    this.query(sql, cnd.args || [], cnd.cb);
};
/**
 * Desc: 获取列表操作。
 * @author zheng.xiaojun
 *
 * @param poClass
 * @param cnd
 * @param args
 * @param cb
 */
function list(poClass, cnd, args, cb){
    var tableName = typeof poClass == "string" ? poClass : poClass.tableName;
    var cnd = getCnd.apply(this, Array.prototype.slice.call(arguments, 1));
    var strSql = "select * from	" + tableName + cnd.where;
    this.query(strSql, cnd.args, cnd.cb);
};

/**
 * Desc: 为对象初始化基础的数据库操作功能。
 * @author zheng.xiaojun
 *
 * @param target
 */
function initDbOper(target){
    target.insert = target.insert ? target.insert : insert;
    target.update = target.update ? target.update : update;
    target.select = target.select ? target.select : select;
    target.del = target.del ? target.del : del;
    target.list = target.list ? target.list : list;
}

exports.getCnd = getCnd;
exports.initDbOper = initDbOper;