var mysql = require('mysql');
var client = mysql.createConnection({ //Use `mysql.createClient` in older versions of node-mysql
    database : "gm",
    user: 'gm',
    password: 'gm'
});
//Enable mysql-queues
var queues = require('mysql-queues');
const DEBUG = true;
queues(client, DEBUG);
//Start running queries as normal...
client.query("select * from demo_curd", [], function(err, result){
    console.log("0000")
    err ? console.error(err) : console.log(result);
});
var q = client.createQueue();
q.query("select * from demo_curd", [], function(err, result){
    console.log("111111")
    err ? console.error(err) : console.log(result);
});
q.query("select * from demo_curd", [], function(err, result){
    console.log("22222")
    err ? console.error(err) : console.log(result);
});
q.execute();
client.query("select * from demo_curd", [], function(err, result){
    console.log("3333")
    err ? console.error(err) : console.log(result);
});

//Now you want a transaction?
var trans = client.startTransaction();
trans.query("update demo_curd set name = ? where id = ? ", ["Name11", 1], function(err, info) {
    if(err)
        trans.rollback();
    else
        trans.query("update demo_curd set name = ? where id = ? ", ["Name2", 2], function(err) {
            if(err)
                trans.rollback();
            else
                trans.commit();
        });
});
trans.execute();

client.query("select * from demo_curd", [], function(err, result){
    console.log("4444")
    err ? console.error(err) : console.log(result);
}); //This won't execute until the transaction is COMPLETELY done (including callbacks)

//Or... as of version 0.3.0, you can do this...
var trans = client.startTransaction();
function error(err) {
    if(err && trans.rollback) {trans.rollback(); throw err;}
}
trans.query("DELETE...", [x], error);
for(var i = 0; i < n; i++)
    trans.query("INSERT...", [ y[i] ], error);
trans.commit(); //Implictly calls resume(), which calls execute()
/* In the case written above, COMMIT is placed at the end of the Queue, yet the
 entire transaction can be rolled back if an error occurs. Nesting these queries
 was not required. */